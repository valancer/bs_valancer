@charset "UTF-8";
@import url(nanumgothic.css);
/**
 * variable
 */
body {
  background-color: #fff; }

/* Common Style */
* {
  margin: 0;
  padding: 0; }

/* set html5 elements to block */
article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {
  display: block; }

html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, address, cite, code, del, dfn, em, font, img, ins, q, s, samp, strike, strong, sub, sup, dl, dt, dd, ol, ul, li, fieldset, form, label, legend {
  border: 0 none; }

body {
  position: relative;
  /*min-height: 800px;*/
  min-width: 1160px;
  margin: 0 auto;
  font-size: 100%;
  line-height: 1em;
  font-family: "Nanum Gothic", sans-serif;
  -ms-text-size-adjust: 100%;
      text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%; }

header, h1 {
  font-size: 100%; }

html, body {
  height: 100%; }

caption, legend {
  position: absolute;
  top: -9999px;
  left: -9999px;
  width: 0;
  height: 0;
  font-size: 0;
  overflow: hidden;
  visibility: hidden; }

caption {
  display: none; }

img {
  border: none;
  vertical-align: top;
  /*width: 100%;*/ }

select, input {
  vertical-align: top; }

hr {
  display: none;
  border: 0 none; }

ol, ul, ul li {
  list-style: none; }

em {
  font-style: normal; }

menu li {
  list-style: none; }

address {
  display: inline;
  font-style: normal; }

button {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  cursor: pointer;
  border: 0px;
  background-color: transparent; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

input, textarea, keygen, select, button {
  font-family: "Nanum Gothic", sans-serif; }

strong {
  font-weight: normal; }

dfn {
  font-style: normal; }

/* link Style */
a:link, a:visited, a:active, a:focus {
  text-decoration: none; }

a:hover {
  text-decoration: underline; }

.hidden {
  display: none !important; }

.visible-hidden {
  visibility: hidden !important; }

.clear {
  clear: both; }

.txt-center {
  text-align: center !important; }

/* forms */
fieldset {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none; }

input[type=submit] {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  cursor: pointer;
  border: 0px; }

::-webkit-input-placeholder {
  color: #4c4c4c; }

:-moz-placeholder {
  /* Firefox 18- */
  color: #4c4c4c; }

::-moz-placeholder {
  /* Firefox 19+ */
  color: #4c4c4c; }

:-ms-input-placeholder {
  color: #4c4c4c; }

@font-face {
  font-family: "Icons";
  src: url("/assets/fonts/icons/Icons.eot");
  src: url("/assets/fonts/icons/Icons.eot?#iefix") format("eot"), url("/assets/fonts/icons/Icons.woff2") format("woff2"), url("/assets/fonts/icons/Icons.woff") format("woff"), url("/assets/fonts/icons/Icons.ttf") format("truetype"), url("/assets/fonts/icons/Icons.svg#Icons") format("svg"); }

.icon-asset:before, .icon-company-profile:before, .icon-metering:before, .icon-notification:before {
  font-family: "Icons";
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  text-decoration: none;
  text-transform: none; }

.icon-asset:before {
  content: ""; }

.icon-company-profile:before {
  content: ""; }

.icon-metering:before {
  content: ""; }

.icon-notification:before {
  content: ""; }

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/**
 * z-index
**/
/**
 * states
 */
/**
 * import
 */
/* GNB HEADER */
.header {
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  z-index: 800;
  height: 78px;
  border-bottom: 1px solid #c7c7c7;
  background-color: #fff; }
  .header > .inner {
    position: relative;
    margin: 0 auto;
    padding-top: 14px;
    height: 64px;
    width: 1440px; }

/* contents */
/* FOOTER */
.footer {
  height: 92px;
  background-color: #fff; }
  .footer > .inner {
    position: relative;
    margin: 0 auto;
    padding-top: 30px;
    width: 1440px; }

/* CONTENTS */
