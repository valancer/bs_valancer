/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$sc-bespin-logotype-name: 'sc-bespin_logotype';
$sc-bespin-logotype-x: 0px;
$sc-bespin-logotype-y: 0px;
$sc-bespin-logotype-offset-x: 0px;
$sc-bespin-logotype-offset-y: 0px;
$sc-bespin-logotype-width: 173px;
$sc-bespin-logotype-height: 16px;
$sc-bespin-logotype-total-width: 173px;
$sc-bespin-logotype-total-height: 113px;
$sc-bespin-logotype-image: '/assets/images/sprites.png';
$sc-bespin-logotype: (0px, 0px, 0px, 0px, 173px, 16px, 173px, 113px, '/assets/images/sprites.png', 'sc-bespin_logotype', );
$sc-icon-asset-name: 'sc-icon_asset';
$sc-icon-asset-x: 0px;
$sc-icon-asset-y: 80px;
$sc-icon-asset-offset-x: 0px;
$sc-icon-asset-offset-y: -80px;
$sc-icon-asset-width: 37px;
$sc-icon-asset-height: 33px;
$sc-icon-asset-total-width: 173px;
$sc-icon-asset-total-height: 113px;
$sc-icon-asset-image: '/assets/images/sprites.png';
$sc-icon-asset: (0px, 80px, 0px, -80px, 37px, 33px, 173px, 113px, '/assets/images/sprites.png', 'sc-icon_asset', );
$sc-icon-grid-name: 'sc-icon_grid';
$sc-icon-grid-x: 0px;
$sc-icon-grid-y: 22px;
$sc-icon-grid-offset-x: 0px;
$sc-icon-grid-offset-y: -22px;
$sc-icon-grid-width: 52px;
$sc-icon-grid-height: 52px;
$sc-icon-grid-total-width: 173px;
$sc-icon-grid-total-height: 113px;
$sc-icon-grid-image: '/assets/images/sprites.png';
$sc-icon-grid: (0px, 22px, 0px, -22px, 52px, 52px, 173px, 113px, '/assets/images/sprites.png', 'sc-icon_grid', );
$sc-icon-metering-name: 'sc-icon_metering';
$sc-icon-metering-x: 116px;
$sc-icon-metering-y: 22px;
$sc-icon-metering-offset-x: -116px;
$sc-icon-metering-offset-y: -22px;
$sc-icon-metering-width: 39px;
$sc-icon-metering-height: 39px;
$sc-icon-metering-total-width: 173px;
$sc-icon-metering-total-height: 113px;
$sc-icon-metering-image: '/assets/images/sprites.png';
$sc-icon-metering: (116px, 22px, -116px, -22px, 39px, 39px, 173px, 113px, '/assets/images/sprites.png', 'sc-icon_metering', );
$sc-icon-notification-name: 'sc-icon_notification';
$sc-icon-notification-x: 58px;
$sc-icon-notification-y: 22px;
$sc-icon-notification-offset-x: -58px;
$sc-icon-notification-offset-y: -22px;
$sc-icon-notification-width: 52px;
$sc-icon-notification-height: 52px;
$sc-icon-notification-total-width: 173px;
$sc-icon-notification-total-height: 113px;
$sc-icon-notification-image: '/assets/images/sprites.png';
$sc-icon-notification: (58px, 22px, -58px, -22px, 52px, 52px, 173px, 113px, '/assets/images/sprites.png', 'sc-icon_notification', );
$spritesheet-width: 173px;
$spritesheet-height: 113px;
$spritesheet-image: '/assets/images/sprites.png';
$spritesheet-sprites: ($sc-bespin-logotype, $sc-icon-asset, $sc-icon-grid, $sc-icon-metering, $sc-icon-notification, );
$spritesheet: (173px, 113px, '/assets/images/sprites.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
