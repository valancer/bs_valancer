/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$sm-bg-ico-coninfo2-name: 'sm-bg_ico_coninfo2';
$sm-bg-ico-coninfo2-x: 0px;
$sm-bg-ico-coninfo2-y: 0px;
$sm-bg-ico-coninfo2-offset-x: 0px;
$sm-bg-ico-coninfo2-offset-y: 0px;
$sm-bg-ico-coninfo2-width: 76px;
$sm-bg-ico-coninfo2-height: 78px;
$sm-bg-ico-coninfo2-total-width: 156px;
$sm-bg-ico-coninfo2-total-height: 132px;
$sm-bg-ico-coninfo2-image: '/assets/images/metering/metering_sprites.png';
$sm-bg-ico-coninfo2: (0px, 0px, 0px, 0px, 76px, 78px, 156px, 132px, '/assets/images/metering/metering_sprites.png', 'sm-bg_ico_coninfo2', );
$sm-bg-ico-essential-name: 'sm-bg_ico_essential';
$sm-bg-ico-essential-x: 140px;
$sm-bg-ico-essential-y: 0px;
$sm-bg-ico-essential-offset-x: -140px;
$sm-bg-ico-essential-offset-y: 0px;
$sm-bg-ico-essential-width: 16px;
$sm-bg-ico-essential-height: 16px;
$sm-bg-ico-essential-total-width: 156px;
$sm-bg-ico-essential-total-height: 132px;
$sm-bg-ico-essential-image: '/assets/images/metering/metering_sprites.png';
$sm-bg-ico-essential: (140px, 0px, -140px, 0px, 16px, 16px, 156px, 132px, '/assets/images/metering/metering_sprites.png', 'sm-bg_ico_essential', );
$sm-bg-ico-notice-name: 'sm-bg_ico_notice';
$sm-bg-ico-notice-x: 82px;
$sm-bg-ico-notice-y: 0px;
$sm-bg-ico-notice-offset-x: -82px;
$sm-bg-ico-notice-offset-y: 0px;
$sm-bg-ico-notice-width: 52px;
$sm-bg-ico-notice-height: 64px;
$sm-bg-ico-notice-total-width: 156px;
$sm-bg-ico-notice-total-height: 132px;
$sm-bg-ico-notice-image: '/assets/images/metering/metering_sprites.png';
$sm-bg-ico-notice: (82px, 0px, -82px, 0px, 52px, 64px, 156px, 132px, '/assets/images/metering/metering_sprites.png', 'sm-bg_ico_notice', );
$sm-bg-next1-name: 'sm-bg_next1';
$sm-bg-next1-x: 0px;
$sm-bg-next1-y: 84px;
$sm-bg-next1-offset-x: 0px;
$sm-bg-next1-offset-y: -84px;
$sm-bg-next1-width: 26px;
$sm-bg-next1-height: 48px;
$sm-bg-next1-total-width: 156px;
$sm-bg-next1-total-height: 132px;
$sm-bg-next1-image: '/assets/images/metering/metering_sprites.png';
$sm-bg-next1: (0px, 84px, 0px, -84px, 26px, 48px, 156px, 132px, '/assets/images/metering/metering_sprites.png', 'sm-bg_next1', );
$sm-bg-next1-on-name: 'sm-bg_next1_on';
$sm-bg-next1-on-x: 32px;
$sm-bg-next1-on-y: 84px;
$sm-bg-next1-on-offset-x: -32px;
$sm-bg-next1-on-offset-y: -84px;
$sm-bg-next1-on-width: 26px;
$sm-bg-next1-on-height: 48px;
$sm-bg-next1-on-total-width: 156px;
$sm-bg-next1-on-total-height: 132px;
$sm-bg-next1-on-image: '/assets/images/metering/metering_sprites.png';
$sm-bg-next1-on: (32px, 84px, -32px, -84px, 26px, 48px, 156px, 132px, '/assets/images/metering/metering_sprites.png', 'sm-bg_next1_on', );
$sm-bg-next2-name: 'sm-bg_next2';
$sm-bg-next2-x: 64px;
$sm-bg-next2-y: 84px;
$sm-bg-next2-offset-x: -64px;
$sm-bg-next2-offset-y: -84px;
$sm-bg-next2-width: 24px;
$sm-bg-next2-height: 44px;
$sm-bg-next2-total-width: 156px;
$sm-bg-next2-total-height: 132px;
$sm-bg-next2-image: '/assets/images/metering/metering_sprites.png';
$sm-bg-next2: (64px, 84px, -64px, -84px, 24px, 44px, 156px, 132px, '/assets/images/metering/metering_sprites.png', 'sm-bg_next2', );
$sm-bg-next3-on-name: 'sm-bg_next3_on';
$sm-bg-next3-on-x: 94px;
$sm-bg-next3-on-y: 84px;
$sm-bg-next3-on-offset-x: -94px;
$sm-bg-next3-on-offset-y: -84px;
$sm-bg-next3-on-width: 20px;
$sm-bg-next3-on-height: 36px;
$sm-bg-next3-on-total-width: 156px;
$sm-bg-next3-on-total-height: 132px;
$sm-bg-next3-on-image: '/assets/images/metering/metering_sprites.png';
$sm-bg-next3-on: (94px, 84px, -94px, -84px, 20px, 36px, 156px, 132px, '/assets/images/metering/metering_sprites.png', 'sm-bg_next3_on', );
$spritesheet-width: 156px;
$spritesheet-height: 132px;
$spritesheet-image: '/assets/images/metering/metering_sprites.png';
$spritesheet-sprites: ($sm-bg-ico-coninfo2, $sm-bg-ico-essential, $sm-bg-ico-notice, $sm-bg-next1, $sm-bg-next1-on, $sm-bg-next2, $sm-bg-next3-on, );
$spritesheet: (156px, 132px, '/assets/images/metering/metering_sprites.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
